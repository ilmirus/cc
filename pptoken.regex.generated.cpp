R"((\n)|)" // NewLine
R"((auto(?![_0-9a-zA-Z]))|)" // KwAuto
R"((break(?![_0-9a-zA-Z]))|)" // KwBreak
R"((case(?![_0-9a-zA-Z]))|)" // KwCase
R"((char(?![_0-9a-zA-Z]))|)" // KwChar
R"((const(?![_0-9a-zA-Z]))|)" // KwConst
R"((continue(?![_0-9a-zA-Z]))|)" // KwContinue
R"((default(?![_0-9a-zA-Z]))|)" // KwDefault
R"((do(?![_0-9a-zA-Z]))|)" // KwDo
R"((double(?![_0-9a-zA-Z]))|)" // KwDouble
R"((else(?![_0-9a-zA-Z]))|)" // KwElse
R"((enum(?![_0-9a-zA-Z]))|)" // KwEnum
R"((extern(?![_0-9a-zA-Z]))|)" // KwExtern
R"((float(?![_0-9a-zA-Z]))|)" // KwFloat
R"((for(?![_0-9a-zA-Z]))|)" // KwFor
R"((goto(?![_0-9a-zA-Z]))|)" // KwGoto
R"((if(?![_0-9a-zA-Z]))|)" // KwIf
R"((int(?![_0-9a-zA-Z]))|)" // KwInt
R"((long(?![_0-9a-zA-Z]))|)" // KwLong
R"((register(?![_0-9a-zA-Z]))|)" // KwRegister
R"((return(?![_0-9a-zA-Z]))|)" // KwReturn
R"((short(?![_0-9a-zA-Z]))|)" // KwShort
R"((signed(?![_0-9a-zA-Z]))|)" // KwSigned
R"((sizeof(?![_0-9a-zA-Z]))|)" // KwSizeof
R"((static(?![_0-9a-zA-Z]))|)" // KwStatic
R"((struct(?![_0-9a-zA-Z]))|)" // KwStruct
R"((switch(?![_0-9a-zA-Z]))|)" // KwSwitch
R"((typedef(?![_0-9a-zA-Z]))|)" // KwTypedef
R"((union(?![_0-9a-zA-Z]))|)" // KwUnion
R"((unsigned(?![_0-9a-zA-Z]))|)" // KwUnsigned
R"((void(?![_0-9a-zA-Z]))|)" // KwVoid
R"((volatile(?![_0-9a-zA-Z]))|)" // KwVolatile
R"((while(?![_0-9a-zA-Z]))|)" // KwWhile
R"((L?'.*?(?:'|$))|)" // CharacterConstant
R"((L?".*?(?:"|$))|)" // StringLiteral
R"(([_a-zA-Z][_a-zA-Z0-9]*)|)" // Identifier
R"((//[^\n]*)|)" // singleLineComment
R"((/\*[\s\S]*?(?:\*/|$))|)" // multiLineComment
R"(([ \t\r\f\v]+)|)" // whitespace
R"((\.?[0-9](?:[eE][+-]|\.|[0-9a-zA-Z_])*)|)" // PPNumber
R"((-|\+|\*=)|)" // Operator
R"((.))" // NonWhiteSpace
