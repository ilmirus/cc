R"((\n)|)" // NewLine
R"((auto(?![_0-9a-zA-Z]))|)" // Auto
R"((break(?![_0-9a-zA-Z]))|)" // Break
R"((case(?![_0-9a-zA-Z]))|)" // Case
R"((char(?![_0-9a-zA-Z]))|)" // Char
R"((const(?![_0-9a-zA-Z]))|)" // Const
R"((continue(?![_0-9a-zA-Z]))|)" // Continue
R"((default(?![_0-9a-zA-Z]))|)" // Default
R"((do(?![_0-9a-zA-Z]))|)" // Do
R"((double(?![_0-9a-zA-Z]))|)" // Double
R"((else(?![_0-9a-zA-Z]))|)" // Else
R"((enum(?![_0-9a-zA-Z]))|)" // Enum
R"((extern(?![_0-9a-zA-Z]))|)" // Extern
R"((float(?![_0-9a-zA-Z]))|)" // Float
R"((for(?![_0-9a-zA-Z]))|)" // For
R"((goto(?![_0-9a-zA-Z]))|)" // Goto
R"((if(?![_0-9a-zA-Z]))|)" // If
R"((int(?![_0-9a-zA-Z]))|)" // Int
R"((long(?![_0-9a-zA-Z]))|)" // Long
R"((register(?![_0-9a-zA-Z]))|)" // Register
R"((return(?![_0-9a-zA-Z]))|)" // Return
R"((short(?![_0-9a-zA-Z]))|)" // Short
R"((signed(?![_0-9a-zA-Z]))|)" // Signed
R"((sizeof(?![_0-9a-zA-Z]))|)" // Sizeof
R"((static(?![_0-9a-zA-Z]))|)" // Static
R"((struct(?![_0-9a-zA-Z]))|)" // Struct
R"((switch(?![_0-9a-zA-Z]))|)" // Switch
R"((typedef(?![_0-9a-zA-Z]))|)" // Typedef
R"((union(?![_0-9a-zA-Z]))|)" // Union
R"((unsigned(?![_0-9a-zA-Z]))|)" // Unsigned
R"((void(?![_0-9a-zA-Z]))|)" // Void
R"((volatile(?![_0-9a-zA-Z]))|)" // Volatile
R"((while(?![_0-9a-zA-Z]))|)" // While
R"((L?'.*?(?:'|$))|)" // CharacterConstant
R"((L?".*?(?:"|$))|)" // StringLiteral
R"(([_a-zA-Z][_a-zA-Z0-9]*)|)" // Identifier
R"((//[^\n]*)|)" // singleLineComment
R"((/\*[\s\S]*?(?:\*/|$))|)" // multiLineComment
R"(([ \t\r\f\v]+)|)" // whitespace
R"((\.?[0-9](?:[eE][+-]|\.|[0-9a-zA-Z_])*)|)" // PPNumber
R"((-|\+|\*=)|)" // Operator
R"((.))" // NonWhiteSpace
